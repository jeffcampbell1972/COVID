@page "/States"

@using COVID.Component.Models
@using COVID.Web.Components
@using COVID.Web.Filters
@using COVID.Web.Interfaces

<PageTitle>COVID Cases by State</PageTitle>


<h1>State COVID Information</h1>

<p>This page allows you to view each state individually.  It also includes some state-level information which might be helpful.</p>

<TelerikLoaderContainer OverlayThemeColor="@ThemeConstants.Loader.ThemeColor.Light"
Visible="@( ShowLoader )">
    <Template>
        <TelerikLoader Type="@LoaderType.InfiniteSpinner"
        Size="@ThemeConstants.Loader.Size.Large" />
    </Template>
</TelerikLoaderContainer>

@if (vm != null)
{
    <CompnentBuildFilterForm 
    States="@vm.States" 
    Filter="@_filter"
    OnFilterChanged="OnFilterChanged">
    </CompnentBuildFilterForm>
    <br />
    <StateDetails StateInfo="@vm.CurrState"></StateDetails>
    <br />
    <hr />
    <CasesGrid Cases="@vm.Cases" FilterMode="GridFilterMode.None"></CasesGrid>
}

@code {

    [Inject] IComponenentService<StatesPageVM> statesPageComponentService { get; set; }

    ComponentBuildFilter _filter = new ComponentBuildFilter ();
    private StatesPageVM vm { get; set; } 
    private bool ShowLoader { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await BuildComponent();

        if (vm != null)
        {
            _filter.CollectionDate = vm.MaxDate;
            _filter.StateAbbreviation = vm.CurrState.Abbreviation;
        }
    }
    private async Task OnFilterChanged(ComponentBuildFilter filter)
    {
        _filter = filter;

        await BuildComponent();
    }
    private async Task BuildComponent()
    {
        ShowLoader = true;
        vm = await statesPageComponentService.BuildAsync(_filter);  
        ShowLoader = false;
    }
}
